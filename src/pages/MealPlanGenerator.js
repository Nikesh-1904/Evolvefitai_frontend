// src/pages/MealPlanGenerator.js

import React, { useState } from 'react';
import {
  Container,
  Typography,
  Card,
  CardContent,
  Button,
  Box,
  CircularProgress,
  Alert,
  Grid,
  Chip,
  Paper,
  Divider,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
} from '@mui/material';
import { AutoAwesome, RestaurantMenu, LocalFireDepartment, Save } from '@mui/icons-material';
import { useAuth } from '../contexts/AuthContext';
import apiService from '../services/apiService';
import AIModelBadge from '../components/AIModelBadge';

const MealPlanGenerator = () => {
  const { user } = useAuth();
  const [generating, setGenerating] = useState(false);
  const [mealPlan, setMealPlan] = useState(null);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  const handleGeneratePlan = async () => {
    setGenerating(true);
    setError('');
    setSuccess('');
    setMealPlan(null);

    try {
      const response = await apiService.generateMealPlan({}); // Pass empty object for now
      if (!response.ai_generated) {
        throw new Error('AI failed to generate a meal plan. Please try again.');
      }
      setMealPlan(response);
      setSuccess(`Your personalized meal plan has been generated by ${response.ai_model}!`);
    } catch (err) {
      setError(err.message || 'An unexpected error occurred.');
    } finally {
      setGenerating(false);
    }
  };

  const handleSavePlan = async () => {
    if (!mealPlan) return;
    try {
      // In a real app, you'd have a saveMealPlan function in apiService
      console.log("Saving meal plan:", mealPlan);
      setSuccess('Meal plan saved successfully! (Feature coming soon)');
    } catch (err) {
      setError('Failed to save meal plan.');
    }
  };

  const MacroChip = ({ label, value, unit, color }) => (
    <Chip
      label={<>{label}: <strong>{value}{unit}</strong></>}
      color={color}
      variant="outlined"
      sx={{ fontWeight: 'bold' }}
    />
  );

  return (
    <Container maxWidth="lg" sx={{ py: 4 }}>
      <Box textAlign="center" mb={4}>
        <Typography variant="h3" component="h1" gutterBottom>
          ðŸ¥— AI Meal Plan Generator
        </Typography>
        <Typography variant="h6" color="text.secondary" paragraph>
          Let our AI create a delicious and healthy meal plan tailored to your fitness goals.
        </Typography>
      </Box>

      {!user?.weight || !user?.height || !user?.age || !user?.gender || !user?.activity_level || !user?.fitness_goal ? (
        <Alert severity="warning" sx={{ mb: 3 }}>
          Your profile is incomplete. For the most accurate meal plan, please fill out your age, weight, height, gender, activity level, and fitness goal in your <strong>profile settings</strong>.
        </Alert>
      ) : null}

      <Card sx={{ mb: 3 }}>
        <CardContent sx={{ textAlign: 'center' }}>
          <Typography variant="h5" gutterBottom>Ready for your personalized plan?</Typography>
          <Button
            variant="contained"
            size="large"
            onClick={handleGeneratePlan}
            disabled={generating}
            startIcon={generating ? <CircularProgress size={20} /> : <AutoAwesome />}
            sx={{ minWidth: 250, height: 56 }}
          >
            {generating ? 'Generating Your Plan...' : 'Generate My Meal Plan'}
          </Button>
        </CardContent>
      </Card>

      {success && <Alert severity="success" sx={{ mb: 3 }}>{success}</Alert>}
      {error && <Alert severity="error" sx={{ mb: 3 }}>{error}</Alert>}

      {mealPlan && (
        <Card>
          <CardContent>
            <Box display="flex" justifyContent="space-between" alignItems="flex-start" mb={2}>
              <Box>
                <Typography variant="h4" gutterBottom>{mealPlan.name}</Typography>
                <Box display="flex" gap={1} flexWrap="wrap" alignItems="center">
                  <Chip icon={<LocalFireDepartment />} label={`~${mealPlan.target_calories} kcal`} color="error" />
                  <AIModelBadge aiModel={mealPlan.ai_model} aiGenerated={mealPlan.ai_generated} size="medium" />
                </Box>
              </Box>
              <Button variant="outlined" onClick={handleSavePlan} startIcon={<Save />}>
                Save Plan
              </Button>
            </Box>

            <Paper variant="outlined" sx={{ p: 2, mb: 3 }}>
                <Typography variant="h6" gutterBottom>Daily Nutrition Summary</Typography>
                <Grid container spacing={1}>
                    <Grid item><MacroChip label="Protein" value={mealPlan.target_protein} unit="g" color="primary" /></Grid>
                    <Grid item><MacroChip label="Carbs" value={mealPlan.target_carbs} unit="g" color="secondary" /></Grid>
                    <Grid item><MacroChip label="Fat" value={mealPlan.target_fat} unit="g" color="warning" /></Grid>
                </Grid>
            </Paper>

            <Grid container spacing={2}>
              {Object.entries(mealPlan.meals).map(([mealType, mealDetails]) => (
                <Grid item xs={12} md={6} key={mealType}>
                  <Card variant="outlined" sx={{ height: '100%' }}>
                    <CardContent>
                      <Typography variant="h6" gutterBottom sx={{ textTransform: 'capitalize' }}>
                        {mealType}: {mealDetails.name}
                      </Typography>
                      <Divider sx={{ my: 1 }} />
                      <Typography variant="subtitle2" sx={{ fontWeight: 'bold' }}>Ingredients:</Typography>
                      <List dense>
                        {mealDetails.ingredients.map((ing, i) => <ListItem key={i}><ListItemText primary={`- ${ing}`} /></ListItem>)}
                      </List>
                      <Typography variant="subtitle2" sx={{ fontWeight: 'bold' }}>Instructions:</Typography>
                      <Typography variant="body2" color="text.secondary" paragraph>{mealDetails.instructions}</Typography>
                      <Divider sx={{ my: 1 }} />
                       <Box display="flex" gap={1} flexWrap="wrap">
                          <Chip label={`${mealDetails.calories} kcal`} size="small" />
                          <Chip label={`${mealDetails.protein}g P`} size="small" variant="outlined" color="primary" />
                          <Chip label={`${mealDetails.carbs}g C`} size="small" variant="outlined" color="secondary" />
                          <Chip label={`${mealDetails.fat}g F`} size="small" variant="outlined" color="warning" />
                       </Box>
                    </CardContent>
                  </Card>
                </Grid>
              ))}
            </Grid>
          </CardContent>
        </Card>
      )}
    </Container>
  );
};

export default MealPlanGenerator;