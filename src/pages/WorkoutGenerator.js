// src/pages/WorkoutGenerator.js - Definitive version with all features merged

import React, { useState } from 'react';
import {
  Container,
  Typography,
  Card,
  CardContent,
  Button,
  Box,
  CircularProgress,
  Alert,
  Grid,
  TextField,
  Chip,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  List,
  ListItem,
  ListItemText,
  IconButton,
  Tooltip,
  LinearProgress,
  Divider,
  Paper
} from '@mui/material';
import {
  ExpandMore,
  PlayArrow,
  AutoAwesome,
  Timer,
  FitnessCenter,
  VideoLibrary,
  Lightbulb,
  ThumbUp,
  ThumbDown,
  Save,
  Refresh,
  Computer,
  Psychology,
  Settings,
  SmartToy,
  LocalFireDepartment,
  TrendingUp
} from '@mui/icons-material';
import { useAuth } from '../contexts/AuthContext';
import { useNavigate } from 'react-router-dom';
import apiService from '../services/apiService';

const AIModelBadge = ({ aiModel, aiGenerated, size = 'small' }) => {
  if (!aiGenerated || !aiModel) {
    return (
      <Chip
        icon={<Settings />}
        label="Rule-based"
        size={size}
        color="default"
        variant="outlined"
      />
    );
  }

  const getModelConfig = (model) => {
    const modelLower = model.toLowerCase();
    
    if (modelLower.includes('groq') || modelLower.includes('llama3')) {
      return { icon: <AutoAwesome />, label: 'Groq AI', color: 'primary', tooltip: 'Generated by Groq Llama3 - Ultra-fast AI inference' };
    } else if (modelLower.includes('ollama') || modelLower.includes('llama2')) {
      return { icon: <Computer />, label: 'Ollama AI', color: 'secondary', tooltip: 'Generated by local Ollama - Privacy-focused AI' };
    } else if (modelLower.includes('huggingface') || modelLower.includes('dialogpt')) {
      return { icon: <SmartToy />, label: 'HuggingFace', color: 'info', tooltip: 'Generated by HuggingFace AI - Open-source intelligence' };
    } else if (modelLower.includes('openai') || modelLower.includes('gpt')) {
      return { icon: <Psychology />, label: 'OpenAI', color: 'success', tooltip: 'Generated by OpenAI GPT - Advanced language model' };
    } else {
      return { icon: <AutoAwesome />, label: 'AI Generated', color: 'primary', tooltip: `Generated by ${model}` };
    }
  };

  const config = getModelConfig(aiModel);

  return (
    <Tooltip title={config.tooltip} arrow>
      <Chip
        icon={config.icon}
        label={config.label}
        size={size}
        color={config.color}
        variant="filled"
        sx={{ fontWeight: 'bold', '& .MuiChip-icon': { animation: 'pulse 2s infinite' }, '@keyframes pulse': { '0%': { transform: 'scale(1)' }, '50%': { transform: 'scale(1.1)' }, '100%': { transform: 'scale(1)' }}}}
      />
    </Tooltip>
  );
};

const muscleGroups = ['Chest', 'Back', 'Legs', 'Shoulders', 'Arms', 'Core', 'Full Body'];

function WorkoutGenerator() {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [generating, setGenerating] = useState(false);
  const [workoutPlan, setWorkoutPlan] = useState(null);
  const [duration, setDuration] = useState(45);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [exerciseDetails, setExerciseDetails] = useState({});
  const [generationTime, setGenerationTime] = useState(null);
  const [selectedMuscles, setSelectedMuscles] = useState([]);

  const handleMuscleToggle = (muscle) => {
    setSelectedMuscles((prev) =>
      prev.includes(muscle)
        ? prev.filter((m) => m !== muscle)
        : [...prev, muscle]
    );
  };

  const handleGenerateWorkout = async () => {
    setGenerating(true);
    setError('');
    setSuccess('');
    setWorkoutPlan(null);
    setGenerationTime(null);

    const startTime = Date.now();

    try {
      const requestData = {
        user_preferences: {
          fitness_goal: user?.fitness_goal || 'general_fitness',
          experience_level: user?.experience_level || 'intermediate',
        },
        duration_minutes: duration,
        target_muscle_groups: selectedMuscles,
      };

      const response = await apiService.generateWorkout(requestData);
      
      const endTime = Date.now();
      const timeTaken = ((endTime - startTime) / 1000).toFixed(2);
      setGenerationTime(timeTaken);
      
      setWorkoutPlan(response);
      
      setSuccess(`Workout generated in ${timeTaken}s by ${response.ai_model || 'AI'}!`);
      
    } catch (err) {
      setError('Failed to generate workout. Please try again.');
    } finally {
      setGenerating(false);
    }
  };

  const fetchExerciseDetails = async (exerciseName) => {
    if (exerciseDetails[exerciseName]) return;
    try {
      const details = await apiService.getExerciseDetails(exerciseName);
      setExerciseDetails(prev => ({ ...prev, [exerciseName]: details }));
    } catch (error) {
      console.error('Failed to fetch exercise details:', error);
    }
  };

  const handleStartWorkout = () => {
    if (!workoutPlan) return;
    navigate('/workout-session', { state: { workoutPlan: workoutPlan } });
  };

  const handleSaveWorkout = async () => {
    if (!workoutPlan) return;
    try {
      await apiService.saveWorkoutPlan(workoutPlan);
      setSuccess('Workout saved successfully!');
    } catch (error) {
      setError('Failed to save workout');
    }
  };

  const handleExerciseFeedback = async (exerciseName, feedback) => {
    try {
      await apiService.submitExerciseFeedback(exerciseName, feedback);
      setSuccess(`Feedback submitted! This helps improve AI recommendations.`);
    } catch (error) {
      console.error('Failed to submit feedback:', error);
    }
  };

  return (
    <Container maxWidth="lg" sx={{ py: 4 }}>
      <Box textAlign="center" mb={4}>
        <Typography variant="h3" component="h1" gutterBottom>ü§ñ AI Workout Generator</Typography>
        <Typography variant="h6" color="text.secondary" paragraph>Get personalized workouts powered by advanced AI models</Typography>
      </Box>

      <Card sx={{ mb: 3, background: 'linear-gradient(45deg, #f5f5f5 30%, #e3f2fd 90%)' }}>
        <CardContent>
          <Typography variant="h5" gutterBottom>üéØ Workout Preferences</Typography>
          <Grid container spacing={3} alignItems="center">
            <Grid item xs={12} sm={4}>
              <TextField
                type="number"
                label="Duration (minutes)"
                value={duration}
                onChange={(e) => setDuration(Math.max(15, Math.min(120, parseInt(e.target.value) || 45)))}
                fullWidth
                inputProps={{ min: 15, max: 120 }}
                helperText="15-120 minutes"
              />
            </Grid>
            <Grid item xs={12} sm={8}>
              <Button
                variant="contained"
                size="large"
                onClick={handleGenerateWorkout}
                disabled={generating}
                startIcon={generating ? <CircularProgress size={20} /> : <AutoAwesome />}
                sx={{ height: 56, background: 'linear-gradient(45deg, #FF6B6B 30%, #4ECDC4 90%)' }}
              >
                {generating ? 'Generating AI Workout...' : 'üöÄ Generate AI Workout'}
              </Button>
            </Grid>
          </Grid>
          
          <Box mt={3}>
            <Typography variant="subtitle1" gutterBottom>Target Muscle Groups (Optional)</Typography>
            <Box display="flex" gap={1} flexWrap="wrap">
              {muscleGroups.map((muscle) => (
                <Chip
                  key={muscle}
                  label={muscle}
                  clickable
                  onClick={() => handleMuscleToggle(muscle)}
                  color={selectedMuscles.includes(muscle) ? 'primary' : 'default'}
                  variant={selectedMuscles.includes(muscle) ? 'filled' : 'outlined'}
                />
              ))}
            </Box>
          </Box>

          {user && (
            <Box mt={3}>
              <Typography variant="subtitle2" color="text.secondary" gutterBottom>üí™ Based on your profile:</Typography>
              <Box display="flex" gap={1} flexWrap="wrap">
                {user.fitness_goal && <Chip icon={<TrendingUp />} label={`Goal: ${user.fitness_goal.replace('_', ' ')}`} size="small" variant="outlined" />}
                {user.experience_level && <Chip icon={<FitnessCenter />} label={`Level: ${user.experience_level}`} size="small" variant="outlined" />}
              </Box>
            </Box>
          )}

          {generating && (
            <Box mt={3}>
              <Typography variant="body2" color="text.secondary" gutterBottom>üß† AI is analyzing your profile...</Typography>
              <LinearProgress sx={{ height: 8, borderRadius: 4, '& .MuiLinearProgress-bar': { background: 'linear-gradient(45deg, #FF6B6B 30%, #4ECDC4 90%)'}}} />
            </Box>
          )}
        </CardContent>
      </Card>

      {success && <Alert severity="success" sx={{ mb: 3 }} onClose={() => setSuccess('')}>{success}</Alert>}
      {error && <Alert severity="error" sx={{ mb: 3 }} onClose={() => setError('')}>{error}</Alert>}

      {workoutPlan && (
        <Card sx={{ mb: 3 }}>
          <CardContent>
            <Box display="flex" justifyContent="space-between" alignItems="flex-start" mb={3}>
              <Box flex={1}>
                <Typography variant="h4" gutterBottom>üèãÔ∏è {workoutPlan.name || 'Your Personalized Workout'}</Typography>
                <Box display="flex" gap={1} mb={2} flexWrap="wrap">
                  <Chip icon={<Timer />} label={`${workoutPlan.estimated_duration || duration} min`} color="primary" />
                  <Chip icon={<FitnessCenter />} label={workoutPlan.difficulty_level || 'Moderate'} color="secondary" />
                  {workoutPlan.estimated_calories && <Chip icon={<LocalFireDepartment />} label={`~${workoutPlan.estimated_calories} cal`} color="error" variant="outlined" />}
                  <AIModelBadge aiModel={workoutPlan.ai_model} aiGenerated={workoutPlan.ai_generated} size="medium" />
                  {generationTime && <Chip label={`Generated in ${generationTime}s`} size="small" variant="outlined" color="info" />}
                </Box>
              </Box>
              <Box display="flex" flexDirection="column" gap={1} ml={2}>
                <Button variant="outlined" onClick={handleSaveWorkout} startIcon={<Save />} size="small">Save Plan</Button>
                <Button variant="contained" size="large" onClick={handleStartWorkout} startIcon={<PlayArrow />} sx={{ background: 'linear-gradient(45deg, #FF6B6B 30%, #4ECDC4 90%)' }}>Start Workout</Button>
              </Box>
            </Box>

            {workoutPlan.description && <Typography variant="body1" color="text.secondary" paragraph>{workoutPlan.description}</Typography>}
            <Divider sx={{ my: 2 }} />

            <Typography variant="h5" gutterBottom>üìã Exercises ({workoutPlan.exercises?.length || 0})</Typography>
            {workoutPlan.exercises?.map((exercise, index) => (
              <Accordion key={index} sx={{ mb: 1, '&:before': { display: 'none' }, boxShadow: '0 2px 8px rgba(0,0,0,0.1)', borderRadius: '8px !important' }}>
                <AccordionSummary expandIcon={<ExpandMore />}>
                  <Box display="flex" alignItems="center" width="100%">
                    <Typography variant="h6" sx={{ backgroundColor: 'primary.main', color: 'primary.contrastText', borderRadius: '50%', width: 32, height: 32, display: 'flex', alignItems: 'center', justifyContent: 'center', mr: 2 }}>{index + 1}</Typography>
                    <Typography variant="h6" sx={{ flexGrow: 1, fontWeight: 600 }}>{exercise.name}</Typography>
                    <Box display="flex" gap={1} mr={2}>
                      <Chip label={`${exercise.sets} sets`} size="small" />
                      <Chip label={`${exercise.reps} reps`} size="small" />
                    </Box>
                  </Box>
                </AccordionSummary>
                <AccordionDetails>
                  <Grid container spacing={3}>
                    <Grid item xs={12} md={8}>
                      {exercise.instructions && (
                        <Box mb={2}><Typography variant="subtitle2" gutterBottom sx={{ fontWeight: 600 }}>üìù Instructions:</Typography><Typography variant="body2" color="text.secondary">{exercise.instructions}</Typography></Box>
                      )}
                      {exercise.muscle_groups && exercise.muscle_groups.length > 0 && (
                        <Box mb={2}><Typography variant="subtitle2" gutterBottom sx={{ fontWeight: 600 }}>üéØ Target Muscles:</Typography><Box display="flex" gap={1} flexWrap="wrap">{exercise.muscle_groups.map((muscle, idx) => (<Chip key={idx} label={muscle} size="small" variant="outlined" color="primary" />))}</Box></Box>
                      )}
                    </Grid>
                    <Grid item xs={12} md={4}>
                      <Box display="flex" flexDirection="column" gap={1} mb={2}>
                        <Button size="small" startIcon={<VideoLibrary />} onClick={() => fetchExerciseDetails(exercise.name)} variant="outlined">Watch Video</Button>
                        <Button size="small" startIcon={<Lightbulb />} onClick={() => fetchExerciseDetails(exercise.name)} variant="outlined">Get Tips</Button>
                      </Box>
                      <Box>
                        <Typography variant="caption" color="text.secondary" display="block" mb={1}>Help improve AI:</Typography>
                        <Box display="flex" justifyContent="center" gap={1}>
                          <Tooltip title="Good exercise suggestion"><IconButton size="small" color="success" onClick={() => handleExerciseFeedback(exercise.name, 'like')}><ThumbUp /></IconButton></Tooltip>
                          <Tooltip title="Poor exercise suggestion"><IconButton size="small" color="error" onClick={() => handleExerciseFeedback(exercise.name, 'dislike')}><ThumbDown /></IconButton></Tooltip>
                        </Box>
                      </Box>
                    </Grid>
                  </Grid>

                  {exerciseDetails[exercise.name] && (
                    <Box mt={3} p={2} bgcolor="grey.50" borderRadius={2}>
                      {exerciseDetails[exercise.name].videos && (
                        <Box mb={2}>
                          <Typography variant="subtitle2" gutterBottom sx={{ fontWeight: 600 }}>üé¨ Video Demonstrations:</Typography>
                          <List dense>
                            {exerciseDetails[exercise.name].videos.slice(0, 2).map((video, idx) => (
                              <ListItem key={idx} divider>
                                <ListItemText primary={video.title} secondary={`Duration: ${video.duration || 'N/A'}s`} />
                                <Button size="small" href={video.youtube_url} target="_blank" startIcon={<VideoLibrary />} variant="contained" color="error">Watch</Button>
                              </ListItem>
                            ))}
                          </List>
                        </Box>
                      )}
                      {exerciseDetails[exercise.name].tips && (
                        <Box><Typography variant="subtitle2" gutterBottom sx={{ fontWeight: 600 }}>üí° Exercise Tips:</Typography><List dense>{exerciseDetails[exercise.name].tips.slice(0, 3).map((tip, idx) => (<ListItem key={idx}><ListItemText primary={tip.title} secondary={tip.content} /></ListItem>))}</List></Box>
                      )}
                    </Box>
                  )}
                </AccordionDetails>
              </Accordion>
            ))}
            
            <Paper elevation={0} sx={{ mt: 3, p: 3, background: 'linear-gradient(45deg, #667eea 30%, #764ba2 90%)', color: 'white', borderRadius: 2 }}>
              <Typography variant="h6" gutterBottom>üí° Workout Summary</Typography>
              <Typography variant="body2">
                This {workoutPlan.estimated_duration || duration}-minute {workoutPlan.difficulty_level || 'moderate'} workout targets {workoutPlan.exercises?.length || 0} different exercises.
                {workoutPlan.estimated_calories && ` You'll burn approximately ${workoutPlan.estimated_calories} calories.`}
                <br /><br />
                üí™ Remember to warm up before starting, stay hydrated throughout, and listen to your body!
              </Typography>
              <Box mt={2}>
                <Button variant="contained" size="large" onClick={handleStartWorkout} startIcon={<PlayArrow />} sx={{ backgroundColor: 'rgba(255,255,255,0.2)', '&:hover': { backgroundColor: 'rgba(255,255,255,0.3)' } }}>üöÄ Start This Workout Now</Button>
              </Box>
            </Paper>
          </CardContent>
        </Card>
      )}

      <Paper elevation={0} sx={{ p: 2, textAlign: 'center', backgroundColor: 'grey.50', borderRadius: 2 }}>
        <Typography variant="body2" color="text.secondary">
          ü§ñ Powered by advanced AI models including Groq Llama3, Ollama, and rule-based systems<br />
          üí™ Every workout is personalized based on your fitness profile and goals
        </Typography>
      </Paper>
    </Container>
  );
}

export default WorkoutGenerator;