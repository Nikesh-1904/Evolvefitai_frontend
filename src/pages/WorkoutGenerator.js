// src/pages/WorkoutGenerator.js - Complete version with AI tracking, Start Workout, and enhanced features

import React, { useState } from 'react';
import {
  Container,
  Typography,
  Card,
  CardContent,
  Button,
  Box,
  CircularProgress,
  Alert,
  Grid,
  TextField,
  Chip,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  List,
  ListItem,
  ListItemText,
  IconButton,
  Tooltip,
  LinearProgress,
  Divider,
  Paper
} from '@mui/material';
import {
  ExpandMore,
  PlayArrow,
  AutoAwesome,
  Timer,
  FitnessCenter,
  VideoLibrary,
  Lightbulb,
  ThumbUp,
  ThumbDown,
  Save,
  Refresh,
  Computer,
  Psychology,
  Settings,
  SmartToy,
  LocalFireDepartment,
  TrendingUp
} from '@mui/icons-material';
import { useAuth } from '../contexts/AuthContext';
import { useNavigate } from 'react-router-dom';
import apiService from '../services/apiService';

// AI Model Badge Component (inline for completeness)
const AIModelBadge = ({ aiModel, aiGenerated, size = 'small' }) => {
  if (!aiGenerated || !aiModel) {
    return (
      <Chip
        icon={<Settings />}
        label="Rule-based"
        size={size}
        color="default"
        variant="outlined"
      />
    );
  }

  const getModelConfig = (model) => {
    const modelLower = model.toLowerCase();
    
    if (modelLower.includes('groq') || modelLower.includes('llama3')) {
      return {
        icon: <AutoAwesome />,
        label: 'Groq AI',
        color: 'primary',
        tooltip: 'Generated by Groq Llama3-8B - Ultra-fast AI inference'
      };
    } else if (modelLower.includes('ollama') || modelLower.includes('llama2')) {
      return {
        icon: <Computer />,
        label: 'Ollama AI',
        color: 'secondary',
        tooltip: 'Generated by local Ollama Llama2 - Privacy-focused AI'
      };
    } else if (modelLower.includes('huggingface') || modelLower.includes('dialogpt')) {
      return {
        icon: <SmartToy />,
        label: 'HuggingFace',
        color: 'info',
        tooltip: 'Generated by HuggingFace AI - Open-source intelligence'
      };
    } else if (modelLower.includes('openai') || modelLower.includes('gpt')) {
      return {
        icon: <Psychology />,
        label: 'OpenAI',
        color: 'success',
        tooltip: 'Generated by OpenAI GPT - Advanced language model'
      };
    } else {
      return {
        icon: <AutoAwesome />,
        label: 'AI Generated',
        color: 'primary',
        tooltip: `Generated by ${model}`
      };
    }
  };

  const config = getModelConfig(aiModel);

  return (
    <Tooltip title={config.tooltip} arrow>
      <Chip
        icon={config.icon}
        label={config.label}
        size={size}
        color={config.color}
        variant="filled"
        sx={{
          fontWeight: 'bold',
          '& .MuiChip-icon': {
            animation: 'pulse 2s infinite'
          },
          '@keyframes pulse': {
            '0%': { transform: 'scale(1)' },
            '50%': { transform: 'scale(1.1)' },
            '100%': { transform: 'scale(1)' }
          }
        }}
      />
    </Tooltip>
  );
};

function WorkoutGenerator() {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [generating, setGenerating] = useState(false);
  const [workoutPlan, setWorkoutPlan] = useState(null);
  const [duration, setDuration] = useState(45);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [exerciseDetails, setExerciseDetails] = useState({});
  const [generationTime, setGenerationTime] = useState(null);

  const handleGenerateWorkout = async () => {
    setGenerating(true);
    setError('');
    setSuccess('');
    setWorkoutPlan(null);
    setGenerationTime(null);

    const startTime = Date.now();

    try {
      const requestData = {
        user_preferences: {
          fitness_goal: user?.fitness_goal || 'general_fitness',
          experience_level: user?.experience_level || 'intermediate',
          activity_level: user?.activity_level || 'moderately_active',
          dietary_restrictions: user?.dietary_restrictions || [],
        },
        duration_minutes: duration,
      };

      console.log('üöÄ Generating workout with data:', requestData);
      
      const response = await apiService.generateWorkout(requestData);
      
      const endTime = Date.now();
      const timeTaken = ((endTime - startTime) / 1000).toFixed(2);
      setGenerationTime(timeTaken);
      
      setWorkoutPlan(response);
      
      // Log success with AI model info
      console.log('‚úÖ Workout generated successfully!');
      console.log('ü§ñ AI Model:', response.ai_model);
      console.log('üß† AI Generated:', response.ai_generated);
      console.log('‚è±Ô∏è Generation Time:', timeTaken + 's');
      
      setSuccess(`Workout generated in ${timeTaken}s by ${response.ai_model || 'AI'}!`);
      
    } catch (err) {
      console.error('‚ùå Error generating workout:', err);
      setError('Failed to generate workout. Please try again.');
    } finally {
      setGenerating(false);
    }
  };

  const fetchExerciseDetails = async (exerciseName) => {
    try {
      console.log('üîç Fetching details for exercise:', exerciseName);
      const details = await apiService.getExerciseDetails(exerciseName);
      setExerciseDetails(prev => ({
        ...prev,
        [exerciseName]: details
      }));
    } catch (error) {
      console.error('Failed to fetch exercise details:', error);
    }
  };

  const handleStartWorkout = () => {
    if (!workoutPlan) return;
    
    console.log('üèãÔ∏è Starting workout session with plan:', workoutPlan);
    
    // Navigate to workout execution page with workout plan
    navigate('/workout-session', { 
      state: { 
        workoutPlan: workoutPlan 
      } 
    });
  };

  const handleSaveWorkout = async () => {
    if (!workoutPlan) return;
    
    try {
      console.log('üíæ Saving workout plan...');
      await apiService.saveWorkoutPlan(workoutPlan);
      setSuccess('Workout saved successfully!');
    } catch (error) {
      console.error('Failed to save workout:', error);
      setError('Failed to save workout');
    }
  };

  const handleExerciseFeedback = async (exerciseName, feedback) => {
    try {
      console.log(`üëç Submitting ${feedback} feedback for:`, exerciseName);
      await apiService.submitExerciseFeedback(exerciseName, feedback);
      setSuccess(`Feedback submitted! This helps improve AI recommendations.`);
    } catch (error) {
      console.error('Failed to submit feedback:', error);
    }
  };

  return (
    <Container maxWidth="lg" sx={{ py: 4 }}>
      {/* Header */}
      <Box textAlign="center" mb={4}>
        <Typography variant="h3" component="h1" gutterBottom>
          ü§ñ AI Workout Generator
        </Typography>
        <Typography variant="h6" color="text.secondary" paragraph>
          Get personalized workouts powered by advanced AI models
        </Typography>
      </Box>

      {/* Generation Controls */}
      <Card sx={{ mb: 3, background: 'linear-gradient(45deg, #f5f5f5 30%, #e3f2fd 90%)' }}>
        <CardContent>
          <Typography variant="h5" gutterBottom>
            üéØ Workout Preferences
          </Typography>
          
          <Grid container spacing={3} alignItems="center">
            <Grid item xs={12} sm={4}>
              <TextField
                type="number"
                label="Duration (minutes)"
                value={duration}
                onChange={(e) => setDuration(Math.max(15, Math.min(120, parseInt(e.target.value) || 45)))}
                fullWidth
                inputProps={{ min: 15, max: 120 }}
                helperText="15-120 minutes"
              />
            </Grid>
            
            <Grid item xs={12} sm={8}>
              <Button
                variant="contained"
                size="large"
                onClick={handleGenerateWorkout}
                disabled={generating}
                startIcon={generating ? <CircularProgress size={20} /> : <AutoAwesome />}
                sx={{ 
                  minWidth: 200,
                  height: 56,
                  background: 'linear-gradient(45deg, #FF6B6B 30%, #4ECDC4 90%)',
                  '&:hover': {
                    background: 'linear-gradient(45deg, #FF5252 30%, #26A69A 90%)',
                  }
                }}
              >
                {generating ? 'Generating AI Workout...' : 'üöÄ Generate AI Workout'}
              </Button>
            </Grid>
          </Grid>

          {/* User Profile Summary */}
          {user && (
            <Box mt={3}>
              <Typography variant="subtitle2" color="text.secondary" gutterBottom>
                üí™ Based on your profile:
              </Typography>
              <Box display="flex" gap={1} flexWrap="wrap">
                {user.fitness_goal && (
                  <Chip 
                    icon={<TrendingUp />}
                    label={`Goal: ${user.fitness_goal.replace('_', ' ')}`} 
                    size="small" 
                    variant="outlined" 
                  />
                )}
                {user.experience_level && (
                  <Chip 
                    icon={<FitnessCenter />}
                    label={`Level: ${user.experience_level}`} 
                    size="small" 
                    variant="outlined" 
                  />
                )}
                {user.activity_level && (
                  <Chip 
                    icon={<Timer />}
                    label={`Activity: ${user.activity_level.replace('_', ' ')}`} 
                    size="small" 
                    variant="outlined" 
                  />
                )}
                {user.age && (
                  <Chip 
                    label={`Age: ${user.age}`} 
                    size="small" 
                    variant="outlined" 
                  />
                )}
                {user.weight && (
                  <Chip 
                    label={`Weight: ${user.weight}kg`} 
                    size="small" 
                    variant="outlined" 
                  />
                )}
              </Box>
            </Box>
          )}

          {/* Generation Progress */}
          {generating && (
            <Box mt={3}>
              <Typography variant="body2" color="text.secondary" gutterBottom>
                üß† AI is analyzing your profile and generating a personalized workout...
              </Typography>
              <LinearProgress 
                sx={{ 
                  height: 8, 
                  borderRadius: 4,
                  background: 'rgba(255,255,255,0.3)',
                  '& .MuiLinearProgress-bar': {
                    background: 'linear-gradient(45deg, #FF6B6B 30%, #4ECDC4 90%)',
                  }
                }} 
              />
            </Box>
          )}
        </CardContent>
      </Card>

      {/* Success Message */}
      {success && (
        <Alert severity="success" sx={{ mb: 3 }} onClose={() => setSuccess('')}>
          {success}
        </Alert>
      )}

      {/* Error Message */}
      {error && (
        <Alert severity="error" sx={{ mb: 3 }} onClose={() => setError('')}>
          {error}
        </Alert>
      )}

      {/* Generated Workout */}
      {workoutPlan && (
        <Card sx={{ mb: 3 }}>
          <CardContent>
            <Box display="flex" justifyContent="space-between" alignItems="flex-start" mb={3}>
              <Box flex={1}>
                <Typography variant="h4" gutterBottom>
                  üèãÔ∏è {workoutPlan.name || 'Your Personalized Workout'}
                </Typography>
                
                {/* Workout Tags */}
                <Box display="flex" gap={1} mb={2} flexWrap="wrap">
                  <Chip 
                    icon={<Timer />} 
                    label={`${workoutPlan.estimated_duration || duration} min`} 
                    color="primary" 
                  />
                  <Chip 
                    icon={<FitnessCenter />} 
                    label={workoutPlan.difficulty_level || 'Moderate'} 
                    color="secondary" 
                  />
                  {workoutPlan.estimated_calories && (
                    <Chip 
                      icon={<LocalFireDepartment />}
                      label={`~${workoutPlan.estimated_calories} cal`} 
                      color="error"
                      variant="outlined" 
                    />
                  )}
                  
                  {/* AI Model Badge */}
                  <AIModelBadge 
                    aiModel={workoutPlan.ai_model}
                    aiGenerated={workoutPlan.ai_generated}
                    size="small"
                  />
                  
                  {generationTime && (
                    <Chip 
                      label={`Generated in ${generationTime}s`} 
                      size="small"
                      variant="outlined"
                      color="info"
                    />
                  )}
                </Box>
                
                {/* AI Generation Info */}
                {workoutPlan.ai_generated && workoutPlan.ai_model && (
                  <Paper
                    elevation={0}
                    sx={{ 
                      p: 2, 
                      mb: 2, 
                      backgroundColor: 'primary.light',
                      color: 'primary.contrastText',
                      borderRadius: 2
                    }}
                  >
                    <Typography variant="body2">
                      ü§ñ This workout was intelligently generated by <strong>{workoutPlan.ai_model}</strong> based on your profile and preferences
                      {workoutPlan.generation_timestamp && (
                        <span style={{ opacity: 0.8, marginLeft: '8px' }}>
                          ‚Ä¢ Generated at {new Date(workoutPlan.generation_timestamp).toLocaleTimeString()}
                        </span>
                      )}
                    </Typography>
                  </Paper>
                )}
              </Box>
              
              {/* Action Buttons */}
              <Box display="flex" flexDirection="column" gap={1} ml={2}>
                <Button
                  variant="outlined"
                  onClick={handleSaveWorkout}
                  startIcon={<Save />}
                  size="small"
                >
                  Save
                </Button>
                <Button
                  variant="contained"
                  size="large"
                  onClick={handleStartWorkout}
                  startIcon={<PlayArrow />}
                  sx={{ 
                    minWidth: 160,
                    background: 'linear-gradient(45deg, #FF6B6B 30%, #4ECDC4 90%)',
                    '&:hover': {
                      background: 'linear-gradient(45deg, #FF5252 30%, #26A69A 90%)',
                    }
                  }}
                >
                  Start Workout
                </Button>
              </Box>
            </Box>

            {/* Workout Description */}
            {workoutPlan.description && (
              <Typography variant="body1" color="text.secondary" paragraph>
                {workoutPlan.description}
              </Typography>
            )}

            <Divider sx={{ my: 2 }} />

            {/* Exercise List */}
            <Typography variant="h5" gutterBottom>
              üìã Exercises ({workoutPlan.exercises?.length || 0})
            </Typography>
            
            {workoutPlan.exercises?.map((exercise, index) => (
              <Accordion 
                key={index} 
                sx={{ 
                  mb: 1,
                  '&:before': { display: 'none' },
                  boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                  borderRadius: '8px !important'
                }}
              >
                <AccordionSummary 
                  expandIcon={<ExpandMore />}
                  sx={{ 
                    minHeight: 64,
                    '&.Mui-expanded': { minHeight: 64 }
                  }}
                >
                  <Box display="flex" alignItems="center" width="100%">
                    <Box display="flex" alignItems="center" mr={2}>
                      <Typography 
                        variant="h6" 
                        sx={{ 
                          backgroundColor: 'primary.main',
                          color: 'primary.contrastText',
                          borderRadius: '50%',
                          width: 32,
                          height: 32,
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          fontSize: '0.875rem',
                          fontWeight: 'bold'
                        }}
                      >
                        {index + 1}
                      </Typography>
                    </Box>
                    
                    <Typography variant="h6" sx={{ flexGrow: 1, fontWeight: 600 }}>
                      {exercise.name}
                    </Typography>
                    
                    <Box display="flex" gap={1} mr={2}>
                      {exercise.sets && (
                        <Chip label={`${exercise.sets} sets`} size="small" color="primary" />
                      )}
                      {exercise.reps && (
                        <Chip label={`${exercise.reps} reps`} size="small" color="secondary" />
                      )}
                      {exercise.duration_seconds && (
                        <Chip label={`${exercise.duration_seconds}s`} size="small" color="info" />
                      )}
                      {exercise.weight && (
                        <Chip label={exercise.weight} size="small" color="error" />
                      )}
                    </Box>
                  </Box>
                </AccordionSummary>
                
                <AccordionDetails>
                  <Grid container spacing={3}>
                    <Grid item xs={12} md={8}>
                      {/* Instructions */}
                      {exercise.instructions && (
                        <Box mb={2}>
                          <Typography variant="subtitle2" gutterBottom sx={{ fontWeight: 600 }}>
                            üìù Instructions:
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            {exercise.instructions}
                          </Typography>
                        </Box>
                      )}

                      {/* Target Muscles */}
                      {exercise.muscle_groups && exercise.muscle_groups.length > 0 && (
                        <Box mb={2}>
                          <Typography variant="subtitle2" gutterBottom sx={{ fontWeight: 600 }}>
                            üéØ Target Muscles:
                          </Typography>
                          <Box display="flex" gap={1} flexWrap="wrap">
                            {exercise.muscle_groups.map((muscle, idx) => (
                              <Chip
                                key={idx}
                                label={muscle}
                                size="small"
                                variant="outlined"
                                color="primary"
                              />
                            ))}
                          </Box>
                        </Box>
                      )}

                      {/* Equipment & Difficulty */}
                      <Box display="flex" gap={2} mb={2}>
                        {exercise.equipment && (
                          <Box>
                            <Typography variant="subtitle2" gutterBottom sx={{ fontWeight: 600 }}>
                              üèãÔ∏è Equipment:
                            </Typography>
                            <Chip label={exercise.equipment} size="small" color="info" />
                          </Box>
                        )}
                        
                        {exercise.difficulty && (
                          <Box>
                            <Typography variant="subtitle2" gutterBottom sx={{ fontWeight: 600 }}>
                              üìä Difficulty:
                            </Typography>
                            <Chip label={exercise.difficulty} size="small" color="warning" />
                          </Box>
                        )}
                      </Box>
                    </Grid>
                    
                    <Grid item xs={12} md={4}>
                      {/* Action Buttons */}
                      <Box display="flex" flexDirection="column" gap={1} mb={2}>
                        <Button
                          size="small"
                          startIcon={<VideoLibrary />}
                          onClick={() => fetchExerciseDetails(exercise.name)}
                          variant="outlined"
                        >
                          Watch Video
                        </Button>
                        <Button
                          size="small"
                          startIcon={<Lightbulb />}
                          onClick={() => fetchExerciseDetails(exercise.name)}
                          variant="outlined"
                        >
                          Get Tips
                        </Button>
                      </Box>
                      
                      {/* Exercise Feedback */}
                      <Box>
                        <Typography variant="caption" color="text.secondary" display="block" mb={1}>
                          Help improve AI:
                        </Typography>
                        <Box display="flex" justifyContent="center" gap={1}>
                          <Tooltip title="Good exercise suggestion">
                            <IconButton 
                              size="small" 
                              color="success"
                              onClick={() => handleExerciseFeedback(exercise.name, 'like')}
                            >
                              <ThumbUp />
                            </IconButton>
                          </Tooltip>
                          <Tooltip title="Poor exercise suggestion">
                            <IconButton 
                              size="small" 
                              color="error"
                              onClick={() => handleExerciseFeedback(exercise.name, 'dislike')}
                            >
                              <ThumbDown />
                            </IconButton>
                          </Tooltip>
                        </Box>
                      </Box>
                    </Grid>
                  </Grid>

                  {/* Exercise Details (videos, tips) */}
                  {exerciseDetails[exercise.name] && (
                    <Box mt={3} p={2} bgcolor="grey.50" borderRadius={2}>
                      {exerciseDetails[exercise.name].videos && (
                        <Box mb={2}>
                          <Typography variant="subtitle2" gutterBottom sx={{ fontWeight: 600 }}>
                            üé¨ Video Demonstrations:
                          </Typography>
                          <List dense>
                            {exerciseDetails[exercise.name].videos.slice(0, 2).map((video, idx) => (
                              <ListItem key={idx} divider>
                                <ListItemText
                                  primary={video.title}
                                  secondary={`Duration: ${video.duration}s`}
                                />
                                <Button
                                  size="small"
                                  href={video.youtube_url}
                                  target="_blank"
                                  startIcon={<VideoLibrary />}
                                  variant="contained"
                                  color="error"
                                >
                                  Watch
                                </Button>
                              </ListItem>
                            ))}
                          </List>
                        </Box>
                      )}

                      {exerciseDetails[exercise.name].tips && (
                        <Box>
                          <Typography variant="subtitle2" gutterBottom sx={{ fontWeight: 600 }}>
                            üí° Exercise Tips:
                          </Typography>
                          <List dense>
                            {exerciseDetails[exercise.name].tips.slice(0, 3).map((tip, idx) => (
                              <ListItem key={idx}>
                                <ListItemText
                                  primary={tip.title}
                                  secondary={tip.content}
                                />
                              </ListItem>
                            ))}
                          </List>
                        </Box>
                      )}
                    </Box>
                  )}
                </AccordionDetails>
              </Accordion>
            ))}

            {/* Workout Summary */}
            <Paper
              elevation={0}
              sx={{ 
                mt: 3, 
                p: 3, 
                background: 'linear-gradient(45deg, #667eea 30%, #764ba2 90%)',
                color: 'white',
                borderRadius: 2
              }}
            >
              <Typography variant="h6" gutterBottom>
                üí° Workout Summary
              </Typography>
              <Typography variant="body2">
                This {workoutPlan.estimated_duration || duration}-minute {workoutPlan.difficulty_level || 'moderate'} workout 
                targets {workoutPlan.exercises?.length || 0} different exercises{workoutPlan.ai_generated ? `, intelligently crafted by ${workoutPlan.ai_model}` : ''}. 
                {workoutPlan.estimated_calories && ` You'll burn approximately ${workoutPlan.estimated_calories} calories.`}
                <br /><br />
                üí™ Remember to warm up before starting, stay hydrated throughout, and listen to your body!
              </Typography>
              
              {/* Quick Start Button */}
              <Box mt={2}>
                <Button
                  variant="contained"
                  size="large"
                  onClick={handleStartWorkout}
                  startIcon={<PlayArrow />}
                  sx={{ 
                    backgroundColor: 'rgba(255,255,255,0.2)',
                    '&:hover': {
                      backgroundColor: 'rgba(255,255,255,0.3)',
                    }
                  }}
                >
                  üöÄ Start This Workout Now
                </Button>
              </Box>
            </Paper>
          </CardContent>
        </Card>
      )}

      {/* Footer Info */}
      <Paper 
        elevation={0} 
        sx={{ 
          p: 2, 
          textAlign: 'center', 
          backgroundColor: 'grey.50',
          borderRadius: 2
        }}
      >
        <Typography variant="body2" color="text.secondary">
          ü§ñ Powered by advanced AI models including Groq Llama3, Ollama, and rule-based systems
          <br />
          üí™ Every workout is personalized based on your fitness profile and goals
        </Typography>
      </Paper>
    </Container>
  );
}

export default WorkoutGenerator;